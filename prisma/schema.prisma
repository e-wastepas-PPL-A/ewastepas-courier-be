generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model dropbox {
  dropbox_id   String         @id @db.VarChar(255)
  address      String?        @db.VarChar(255)
  longtitude   String?        @db.VarChar(255)
  latitude     String?        @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @db.Timestamp(0)
  user_id      Int
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "id_user_dropbox")
  pickup_waste pickup_waste[]

  @@index([user_id], map: "id_user_dropbox")
}

model users {
  user_id        Int            @id @default(autoincrement())
  name           String?        @db.VarChar(255)
  email          String?        @unique(map: "Email") @db.VarChar(255)
  password       String         @db.VarChar(255)
  phone          String?        @db.VarChar(255)
  date_of_birth  DateTime?      @db.Date
  address        String?        @db.VarChar(255)
  nik            String?        @unique(map: "NIK") @db.VarChar(255)
  account_number String?        @db.VarChar(255)
  ktp_url        String?        @db.VarChar(255)
  kk_url         String?        @db.VarChar(255)
  photo          String?        @db.VarChar(255)
  total_point    Int?
  waste_total    Int?
  roles          users_roles
  status         users_status   @default(pending)
  is_verified    Boolean        @default(false)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  dropbox        dropbox[]
  pickup_waste   pickup_waste[]
}

model pickup_waste {
  pickup_id      String    @id @db.VarChar(255)
  waste_quantity Int?
  pickup_date    DateTime? @db.Date
  pickup_address String?   @db.VarChar(255)
  pickup_status  String?   @db.VarChar(255)
  total_waste    Int?
  dropbox_id     String?   @db.VarChar(255)
  user_id        Int
  users          users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "id_user")
  dropbox        dropbox?  @relation(fields: [dropbox_id], references: [dropbox_id], onDelete: NoAction, onUpdate: NoAction, map: "pickup_waste_ibfk_2")
  waste          waste[]

  @@index([dropbox_id], map: "id_dropbox")
  @@index([user_id], map: "id_user")
}

model waste {
  waste_id      String        @id @db.VarChar(255)
  waste_name    String?       @db.VarChar(255)
  point         Int?
  total_waste   Int?
  created_at    DateTime?     @default(now()) @db.Timestamp(0)
  updated_at    DateTime?     @default(now()) @db.Timestamp(0)
  waste_type_id String?       @db.VarChar(255)
  pickup_id     String?       @db.VarChar(255)
  image         String?       @db.VarChar(255)
  description   String        @db.Text
  waste_type    waste_type?   @relation(fields: [waste_type_id], references: [waste_type_id], onDelete: NoAction, onUpdate: NoAction, map: "waste_ibfk_1")
  pickup_waste  pickup_waste? @relation(fields: [pickup_id], references: [pickup_id], onDelete: NoAction, onUpdate: NoAction, map: "waste_ibfk_2")

  @@index([waste_type_id], map: "id_jenis")
  @@index([pickup_id], map: "id_penjemputan")
}

model waste_type {
  waste_type_id   String    @id @db.VarChar(255)
  waste_type_name String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  waste           waste[]
}

enum users_roles {
  admin
  management
  courier
  community
}

enum users_status {
  accepted
  pending
  denied
}
