generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model community {
  community_id     Int               @id @default(autoincrement())
  name             String            @db.VarChar(50)
  email            String            @unique(map: "email") @db.VarChar(50)
  password         String            @db.VarChar(255)
  phone            String?           @db.VarChar(15)
  date_of_birth    DateTime?         @db.Date
  address          String?           @db.VarChar(255)
  photo            String?           @db.VarChar(255)
  is_verified      Boolean?          @default(false)
  otp_code         String?           @db.VarChar(6)
  otp_expiry       DateTime?         @db.Timestamp(0)
  created_at       DateTime?         @default(now()) @db.Timestamp(0)
  updated_at       DateTime?         @default(now()) @db.Timestamp(0)
  community_points community_points?
  pickup_waste     pickup_waste[]
}

model community_points {
  points_id    Int        @id @default(autoincrement())
  community_id Int?       @unique(map: "community_id")
  total_points Int?       @default(0)
  created_at   DateTime?  @default(now()) @db.Timestamp(0)
  updated_at   DateTime?  @default(now()) @db.Timestamp(0)
  community    community? @relation(fields: [community_id], references: [community_id], onDelete: Cascade, map: "community_points_ibfk_1")
}

model courier {
  courier_id     Int             @id @default(autoincrement())
  name           String          @db.VarChar(50)
  email          String          @unique(map: "email") @db.VarChar(50)
  password       String          @db.VarChar(255)
  phone          String?         @db.VarChar(15)
  date_of_birth  DateTime?       @db.Date
  address        String?         @db.VarChar(255)
  account_number String?         @db.VarChar(50)
  nik            String?         @unique(map: "nik") @db.VarChar(20)
  ktp_url        String?         @db.VarChar(255)
  kk_url         String?         @db.VarChar(255)
  photo          String?         @db.VarChar(255)
  is_verified    Boolean?        @default(false)
  is_active      Boolean?        @default(true)
  otp_code       String?         @db.VarChar(6)
  otp_expiry     DateTime?       @db.Timestamp(0)
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  updated_at     DateTime?       @default(now()) @db.Timestamp(0)
  courier_points courier_points?
  pickup_waste   pickup_waste[]
}

model courier_points {
  points_id   Int       @id @default(autoincrement())
  courier_id  Int?      @unique(map: "courier_id")
  total_waste Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  courier     courier?  @relation(fields: [courier_id], references: [courier_id], onDelete: Cascade, map: "courier_points_ibfk_1")
}

model dropbox {
  dropbox_id   Int             @id @default(autoincrement())
  name         String          @db.VarChar(50)
  address      String          @db.VarChar(255)
  longitude    Decimal?        @db.Decimal(11, 8)
  latitude     Decimal?        @db.Decimal(11, 8)
  capacity     Int?            @default(0)
  status       dropbox_status? @default(Available)
  created_at   DateTime?       @default(now()) @db.Timestamp(0)
  updated_at   DateTime?       @default(now()) @db.Timestamp(0)
  pickup_waste pickup_waste[]
}

model management {
  management_id Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  email         String         @unique(map: "email") @db.VarChar(50)
  password      String         @db.VarChar(50)
  date_of_birth DateTime?      @db.Date
  address       String?        @db.VarChar(255)
  phone         String?        @db.VarChar(15)
  photo         String?        @db.VarChar(255)
  is_active     Boolean?       @default(true)
  is_admin      Boolean?       @default(false)
  created_at    DateTime?      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?      @default(now()) @db.Timestamp(0)
  pickup_waste  pickup_waste[]
}

model pickup_detail {
  pickup_id    Int
  waste_id     Int
  quantity     Int?         @default(0)
  points       Int?         @default(0)
  pickup_waste pickup_waste @relation(fields: [pickup_id], references: [pickup_id], onDelete: Cascade, map: "pickup_detail_ibfk_1")
  waste        waste        @relation(fields: [waste_id], references: [waste_id], onDelete: Cascade, map: "pickup_detail_ibfk_2")

  @@id([pickup_id, waste_id])
  @@index([waste_id], map: "waste_id")
}

model pickup_waste {
  pickup_id        Int                            @id @default(autoincrement())
  pickup_date      DateTime                       @db.Date
  pickup_address   String                         @db.VarChar(255)
  district_address pickup_waste_district_address?
  pickup_status    pickup_waste_pickup_status?    @default(pending)
  dropbox_id       Int?
  courier_id       Int?
  community_id     Int?
  management_id    Int?
  created_at       DateTime?                      @default(now()) @db.Timestamp(0)
  updated_at       DateTime?                      @default(now()) @db.Timestamp(0)
  pickup_detail    pickup_detail[]
  dropbox          dropbox?                       @relation(fields: [dropbox_id], references: [dropbox_id], map: "pickup_waste_ibfk_1")
  courier          courier?                       @relation(fields: [courier_id], references: [courier_id], map: "pickup_waste_ibfk_2")
  community        community?                     @relation(fields: [community_id], references: [community_id], map: "pickup_waste_ibfk_3")
  management       management?                    @relation(fields: [management_id], references: [management_id], map: "pickup_waste_ibfk_4")

  @@index([community_id], map: "community_id")
  @@index([courier_id], map: "courier_id")
  @@index([dropbox_id], map: "dropbox_id")
  @@index([management_id], map: "management_id")
}

model waste {
  waste_id      Int             @id @default(autoincrement())
  waste_name    String          @db.VarChar(255)
  category      String          @db.VarChar(50)
  point         Int?            @default(0)
  waste_type_id Int?
  image         String?         @db.VarChar(255)
  description   String?         @db.Text
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  pickup_detail pickup_detail[]
  waste_type    waste_type?     @relation(fields: [waste_type_id], references: [waste_type_id], onDelete: Cascade, map: "waste_ibfk_1")

  @@index([waste_type_id], map: "waste_type_id")
}

model waste_type {
  waste_type_id   Int       @id @default(autoincrement())
  waste_type_name String    @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  waste           waste[]
}

enum pickup_waste_district_address {
  Bandung_Utara           @map("Bandung Utara")
  Bandung_Selatan         @map("Bandung Selatan")
  Bandung_Timur           @map("Bandung Timur")
  Bandung_Barat           @map("Bandung Barat")
  Cimahi
  Kabupaten_Bandung       @map("Kabupaten Bandung")
  Kabupaten_Bandung_Barat @map("Kabupaten Bandung Barat")
}

enum pickup_waste_pickup_status {
  pending
  accepted
  completed
  cancelled
}

enum dropbox_status {
  Full
  Available
}
